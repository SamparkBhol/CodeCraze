# complex_project.nlp
# This file demonstrates a more complex project that integrates multiple features of the language.

# Define a class for a basic AI agent
class AIAgent:
    def __init__(self, name, version):
        self.name = name
        self.version = version
        self.knowledge_base = []

    # Function to learn new information
    def learn(self, info):
        self.knowledge_base.append(info)

    # Function to make a decision based on learned knowledge
    def make_decision(self):
        if "Python" in self.knowledge_base:
            return "Let's use Python for this project!"
        else:
            return "I need more data to decide."

# Define another class for project management
class ProjectManager:
    def __init__(self, project_name):
        self.project_name = project_name
        self.team = []
        self.tasks = []

    # Add a team member
    def add_member(self, member):
        self.team.append(member)

    # Assign a task
    def assign_task(self, task, member):
        self.tasks.append((task, member))
        print(f"Assigned task '{task}' to {member}.")

    # Review project status
    def review_status(self):
        print(f"Project '{self.project_name}' Status:")
        for task, member in self.tasks:
            print(f"Task: {task} - Assigned to: {member}")

# Instantiate the AI agent and project manager
agent = AIAgent("Cortex", "1.0")
manager = ProjectManager("AI Language Project")

# Teach the AI agent and make a decision
agent.learn("Python")
decision = agent.make_decision()
print("AI Decision:", decision)

# Manage the project
manager.add_member("Alice")
manager.add_member("Bob")
manager.assign_task("Design Language Syntax", "Alice")
manager.assign_task("Implement Interpreter", "Bob")

# Review the project status
manager.review_status()

# Demonstrate nested decision making and looping
for task, member in manager.tasks:
    if member == "Alice":
        print(f"{member} is working on '{task}' - A critical task.")
    else:
        print(f"{member} is handling '{task}' - A supporting task.")
